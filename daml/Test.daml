module Test where

import Main
import Daml.Script

-- Helpers

data TestParties = TestParties with
  hrManager: Party
  candidate: Party
  public: Party

setupTestParties: Script TestParties
setupTestParties = script do
  hrManager <- allocateParty "HR Manager"
  candidate <- allocateParty "Candidate"
  public <- allocateParty "Public"
  return $ TestParties with
    hrManager
    candidate
    public

canCreateJobOffer: Party -> Party -> Script (ContractId JobOffer)
canCreateJobOffer hrManager public =
  submit hrManager $ createCmd $ JobOffer with hrManager; public

cantCreateJobOffer: Party -> Party -> Script ()
cantCreateJobOffer hrManager public =
  submitMustFail hrManager $ createCmd $ JobOffer with hrManager; public

canCreateJobApplication: Party -> Party -> Text -> Script (ContractId JobApplication)
canCreateJobApplication candidate hrManager summary =
  submitMulti [candidate, hrManager] [] $ createCmd $ JobApplication with candidate; hrManager; summary

cantCreateJobApplication: Party -> Party -> Text -> Script ()
cantCreateJobApplication candidate hrManager summary =
  submitMultiMustFail [candidate, hrManager] [] $ createCmd $ JobApplication with candidate; hrManager; summary

canApplyToJobOffer: ContractId JobOffer -> Party -> Text -> Party -> Script (ContractId JobApplication)
canApplyToJobOffer jobOfferCid candidate summary public =
  submitMulti [candidate] [public] $ exerciseCmd jobOfferCid NewJobApplication with candidate;summary

cantApplyToJobOffer: ContractId JobOffer -> Party -> Text -> Party -> Script ()
cantApplyToJobOffer jobOfferCid candidate summary public =
  submitMultiMustFail [candidate] [public] $ exerciseCmd jobOfferCid NewJobApplication with candidate;summary

canCreateJobContract: Party -> Party -> Script (ContractId JobContract)
canCreateJobContract hrManager employee =
  submitMulti [hrManager, employee] [] $ createCmd $ JobContract with hrManager; employee

cantCreateJobContract: Party -> Party -> Script ()
cantCreateJobContract hrManager employee =
  submitMultiMustFail [hrManager, employee] [] $ createCmd $ JobContract with hrManager; employee

canAcceptJobApplication: ContractId JobApplication -> Party -> Script (ContractId JobContract)
canAcceptJobApplication jobApplicationCid hrManager =
  submit hrManager $ exerciseCmd jobApplicationCid Accept

cantAcceptJobApplication: ContractId JobApplication -> Party -> Script ()
cantAcceptJobApplication jobApplicationCid hrManager =
  submitMustFail hrManager $ exerciseCmd jobApplicationCid Accept

-- Scenarios

-- hr manager `can` create multiple job offers.
scenario1: Script ()
scenario1 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  canCreateJobOffer hrManager public
  canCreateJobOffer hrManager public
  pure ()

-- candidate `can` apply to a job offer.
scenario2: Script ()
scenario2 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  jobOfferCid <- canCreateJobOffer hrManager public
  let summary = "CandidateCSV.pdf"
  canApplyToJobOffer jobOfferCid candidate summary public
  pure ()

-- candidate `cant` apply to a job offer twice.
scenario3: Script ()
scenario3 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  jobOfferCid <- canCreateJobOffer hrManager public
  let summary = "CandidateCSV.pdf"
  canApplyToJobOffer jobOfferCid candidate summary public
  cantApplyToJobOffer jobOfferCid candidate summary public
  -- once the job application is created we cannot create it again.
  cantCreateJobApplication candidate hrManager summary
  pure ()

-- hr manager `can` accept a job application.
scenario4: Script ()
scenario4 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  jobOfferCid <- canCreateJobOffer hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  canAcceptJobApplication jobApplicationCid hrManager
  pure ()

-- hr manager `cant` accept a job application twice.
scenario5: Script ()
scenario5 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  jobOfferCid <- canCreateJobOffer hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  canAcceptJobApplication jobApplicationCid hrManager
  cantAcceptJobApplication jobApplicationCid hrManager
  -- once the job contract is created we cannot create it again.
  cantCreateJobContract hrManager candidate
  pure ()

-- candidate `cant` accept itsÂ own job application.
scenario6: Script ()
scenario6 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  jobOfferCid <- canCreateJobOffer hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  cantAcceptJobApplication jobApplicationCid candidate
  pure ()

-- hr manager `cant` apply to a job offer.
scenario7: Script ()
scenario7 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  jobOfferCid <- canCreateJobOffer hrManager public
  let summary = "CandidateCSV.pdf"
  cantApplyToJobOffer jobOfferCid hrManager summary public
  pure ()

-- `cant` create contracts using same parties.
scenario8: Script ()
scenario8 = script do
  random <- allocateParty "Random"
  let summary = "CandidateCSV.pdf"
  cantCreateJobOffer random random
  cantCreateJobApplication random random summary
  cantCreateJobContract random random
