
module Test where

import Main
import Daml.Script

-- Helpers

data TestParties = TestParties with
  hrManager: Party
  candidate: Party
  public: Party

setupTestParties: Script TestParties
setupTestParties = script do
  hrManager <- allocateParty "HR Manager"
  candidate <- allocateParty "Candidate"
  public <- allocateParty "Public"
  return $ TestParties with
    hrManager
    candidate
    public

-- Scenarios

canCreateJobOffer: Party -> Party -> Script (ContractId JobOffer)
canCreateJobOffer hrManager public =
    submit hrManager $ createCmd $ JobOffer with hrManager; public

canCreateJobApplication: Party -> Party -> Text -> Script (ContractId JobApplication)
canCreateJobApplication candidate hrManager summary =
    submitMulti [candidate, hrManager] [] $ createCmd $ JobApplication with candidate; hrManager; summary

cantCreateJobApplication: Party -> Party -> Text -> Script ()
cantCreateJobApplication candidate hrManager summary =
    submitMultiMustFail [candidate, hrManager] [] $ createCmd $ JobApplication with candidate; hrManager; summary

canApplyToJobOffer: ContractId JobOffer -> Party -> Text -> Party -> Script (ContractId JobApplication)
canApplyToJobOffer jobOfferCid candidate summary public =
    submitMulti [candidate] [public] $ exerciseCmd jobOfferCid NewJobApplication with candidate;summary

cantApplyToJobOffer: ContractId JobOffer -> Party -> Text -> Party -> Script ()
cantApplyToJobOffer jobOfferCid candidate summary public =
    submitMultiMustFail [candidate] [public] $ exerciseCmd jobOfferCid NewJobApplication with candidate;summary

canCreateJobContract: Party -> Party -> Script (ContractId JobContract)
canCreateJobContract hrManager employee =
    submitMulti [hrManager, employee] [] $ createCmd $ JobContract with hrManager; employee

cantCreateJobContract: Party -> Party -> Script ()
cantCreateJobContract hrManager employee =
    submitMultiMustFail [hrManager, employee] [] $ createCmd $ JobContract with hrManager; employee

canAcceptJobApplication: ContractId JobApplication -> Party -> Script (ContractId JobContract)
canAcceptJobApplication jobApplicationCid hrManager =
    submit hrManager $ exerciseCmd jobApplicationCid Accept

cantAcceptJobApplication: ContractId JobApplication -> Party -> Script ()
cantAcceptJobApplication jobApplicationCid hrManager =
    submitMustFail hrManager $ exerciseCmd jobApplicationCid Accept

setup: Script ()
setup = script do
    testParties <- setupTestParties
    let hrManager = testParties.hrManager
    let candidate = testParties.candidate
    let public = testParties.public

    canCreateJobOffer hrManager public
    
    jobOfferCid <- canCreateJobOffer hrManager public
    
    let summary = "CandidateCSV.pdf"
    
    jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
    
    cantApplyToJobOffer jobOfferCid candidate summary public
    
    cantCreateJobApplication candidate hrManager summary

    canAcceptJobApplication jobApplicationCid hrManager
    
    cantAcceptJobApplication jobApplicationCid hrManager

    cantCreateJobContract hrManager candidate
    
    pure ()