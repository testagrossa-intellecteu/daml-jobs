module TestHelpers where

import Model
import Daml.Script
import qualified DA.Set as Set

-- Helpers

data TestParties = TestParties with
  hrManager: Party
  candidate: Party
  other: Party
  public: Party

setupTestParties: Script TestParties
setupTestParties = script do
  let parties =  ["HR Manager", "Candidate", "OtherCandidate", "Public"]
  [hrManager, candidate, other, public] <- mapA allocateParty parties
  return $ TestParties with
    hrManager
    candidate
    other
    public

-- START: JobOfferPublicState create helpers
canCreateJobOfferPublicState: Int -> Party -> Party -> Script (ContractId JobOfferPublicState)
canCreateJobOfferPublicState jobId hrManager public = do
  let jobApplicationCids = Set.empty
  submit hrManager $ createCmd $ JobOfferPublicState with jobId; hrManager; public; jobApplicationCids

cantCreateJobOfferPublicState: Int -> Party -> Party -> Script ()
cantCreateJobOfferPublicState jobId hrManager public = do
  let jobApplicationCids = Set.empty
  submitMustFail hrManager $ createCmd $ JobOfferPublicState with jobId; hrManager; public; jobApplicationCids
-- END: JobOfferPublicState create helpers

-- START: JobOffer create helpers
canCreateJobOffer: Int -> Party -> Party -> Script (ContractId JobOffer)
canCreateJobOffer jobId hrManager public =
  submit hrManager $ createCmd $ JobOffer with jobId; hrManager; public

cantCreateJobOffer: Int -> Party -> Party -> Script ()
cantCreateJobOffer jobId hrManager public =
  submitMustFail hrManager $ createCmd $ JobOffer with jobId; hrManager; public
-- END: JobOffer create helpers

-- END: JobApplication create helpers
canCreateJobApplication: Int -> Party -> Party -> Text -> Script (ContractId JobApplication)
canCreateJobApplication jobId candidate hrManager summary =
  submitMulti [candidate, hrManager] [] $ createCmd $ JobApplication with jobId; candidate; hrManager; summary

cantCreateJobApplication: Int -> Party -> Party -> Text -> Script ()
cantCreateJobApplication jobId candidate hrManager summary =
  submitMultiMustFail [candidate, hrManager] [] $ createCmd $ JobApplication with jobId; candidate; hrManager; summary
-- END: JobApplication create helpers

-- START: JobOffer excercise helpers
canApplyToJobOffer: ContractId JobOffer -> Party -> Text -> Party -> Script (ContractId JobApplication)
canApplyToJobOffer jobOfferCid candidate summary public =
  submitMulti [candidate] [public] $ exerciseCmd jobOfferCid NewJobApplication with candidate;summary

cantApplyToJobOffer: ContractId JobOffer -> Party -> Text -> Party -> Script ()
cantApplyToJobOffer jobOfferCid candidate summary public =
  submitMultiMustFail [candidate] [public] $ exerciseCmd jobOfferCid NewJobApplication with candidate;summary

canTerminateJobOffer: ContractId JobOffer -> Party -> ContractId JobApplication -> Script ()
canTerminateJobOffer jobOfferCid hrManager jobApplicationWinnerCid =
  submit hrManager $ exerciseCmd jobOfferCid TerminateJobOffer with jobApplicationWinnerCid

cantTerminateJobOffer: ContractId JobOffer -> Party -> ContractId JobApplication -> Script ()
cantTerminateJobOffer jobOfferCid hrManager jobApplicationWinnerCid =
  submitMustFail hrManager $ exerciseCmd jobOfferCid TerminateJobOffer with jobApplicationWinnerCid
-- END: JobOffer excercise helpers

-- END: JobContract create helpers
canCreateJobContract: Party -> Party -> Script (ContractId JobContract)
canCreateJobContract hrManager employee =
  submitMulti [hrManager, employee] [] $ createCmd $ JobContract with hrManager; employee

cantCreateJobContract: Party -> Party -> Script ()
cantCreateJobContract hrManager employee =
  submitMultiMustFail [hrManager, employee] [] $ createCmd $ JobContract with hrManager; employee
-- END: JobContract create helpers

-- START: JobApplication excercise helpers
canAcceptJobApplication: ContractId JobApplication -> Party -> Script (ContractId JobContract)
canAcceptJobApplication jobApplicationCid hrManager =
  submit hrManager $ exerciseCmd jobApplicationCid Accept

cantAcceptJobApplication: ContractId JobApplication -> Party -> Script ()
cantAcceptJobApplication jobApplicationCid hrManager =
  submitMustFail hrManager $ exerciseCmd jobApplicationCid Accept

canRejectJobApplication: ContractId JobApplication -> Party -> Script ()
canRejectJobApplication jobApplicationCid hrManager =
  submit hrManager $ exerciseCmd jobApplicationCid Reject

cantRejectJobApplication: ContractId JobApplication -> Party -> Script ()
cantRejectJobApplication jobApplicationCid hrManager =
  submitMustFail hrManager $ exerciseCmd jobApplicationCid Reject

canDeclineJobApplication: ContractId JobApplication -> Party -> Party -> Script ()
canDeclineJobApplication jobApplicationCid candidate public =
  submitMulti [candidate] [public] $ exerciseCmd jobApplicationCid Decline

cantDeclineJobApplication: ContractId JobApplication -> Party -> Script ()
cantDeclineJobApplication jobApplicationCid candidate =
  submitMustFail candidate $ exerciseCmd jobApplicationCid Decline
-- END: JobApplication excercise helpers

queryNbrOfJobApplications : Party -> (Party, Int) -> Script (Optional Int)
queryNbrOfJobApplications public (hrManager, jobId) = do
  queryPublicStateResult <- queryContractKey @JobOfferPublicState public (hrManager, jobId)
  let maybePublicState = snd <$> queryPublicStateResult
  let nbrOfJobApplications = (\state -> Set.size state.jobApplicationCids) <$> maybePublicState
  return nbrOfJobApplications