module Test where

import Daml.Script
import TestHelpers

-- Scenarios

-- hr manager `can` create multiple job offer public states using different jobId.
scenario0: Script ()
scenario0 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let jobId1 = 1
  canCreateJobOfferPublicState jobId1 hrManager public
  -- hr manager `cant` create multiple job offer public states using same jobId.
  cantCreateJobOfferPublicState jobId1 hrManager public
  let jobId2 = 2
  canCreateJobOfferPublicState jobId2 hrManager public
  pure ()

-- hr manager `can` create multiple job offers using different jobId.
scenario1: Script ()
scenario1 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let jobId1 = 1
  canCreateJobOffer jobId1 hrManager public
  -- hr manager `cant` create multiple job offers using same jobId.
  cantCreateJobOffer jobId1 hrManager public
  let jobId2 = 2
  canCreateJobOffer jobId2 hrManager public
  pure ()

-- candidate `can` apply to a job offer.
scenario2: Script ()
scenario2 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  canApplyToJobOffer jobOfferCid candidate summary public
  pure ()

-- candidate `cant` apply to a job offer twice.
scenario3: Script ()
scenario3 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  canApplyToJobOffer jobOfferCid candidate summary public
  cantApplyToJobOffer jobOfferCid candidate summary public
  -- once the job application is created we cannot create it again.
  cantCreateJobApplication jobId candidate hrManager summary
  pure ()

-- hr manager `can` accept a job application.
scenario4: Script ()
scenario4 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  canAcceptJobApplication jobApplicationCid hrManager
  pure ()

-- hr manager `cant` accept a job application twice.
scenario5: Script ()
scenario5 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  canAcceptJobApplication jobApplicationCid hrManager
  cantAcceptJobApplication jobApplicationCid hrManager
  -- once the job contract is created we cannot create it again.
  cantCreateJobContract hrManager candidate
  pure ()

-- candidate `cant` accept its own job application.
scenario6: Script ()
scenario6 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  cantAcceptJobApplication jobApplicationCid candidate
  pure ()

-- hr manager `cant` apply to a job offer.
scenario7: Script ()
scenario7 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  cantApplyToJobOffer jobOfferCid hrManager summary public
  pure ()

-- `cant` create contracts using same parties.
scenario8: Script ()
scenario8 = script do
  random <- allocateParty "Random"
  other <- allocateParty "Other"
  let jobId = 1
  canCreateJobOfferPublicState jobId random other
  cantCreateJobOffer jobId random random
  let summary = "CandidateCSV.pdf"
  cantCreateJobApplication jobId random random summary
  cantCreateJobContract random random

-- hr manager `can` reject a job application.
scenario9: Script ()
scenario9 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  canRejectJobApplication jobApplicationCid hrManager
  pure ()

-- hr manager `cant` reject a job application twice.
scenario10: Script ()
scenario10 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  canRejectJobApplication jobApplicationCid hrManager
  cantRejectJobApplication jobApplicationCid hrManager
  pure ()

-- candidate `cant` reject its own job application.
scenario11: Script ()
scenario11 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  cantRejectJobApplication jobApplicationCid candidate
  pure ()

-- candidate `can` decline a job application.
scenario12: Script ()
scenario12 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  canDeclineJobApplication jobApplicationCid candidate public
  pure ()

-- candidate `cant` decline a job application twice.
scenario13: Script ()
scenario13 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  canDeclineJobApplication jobApplicationCid candidate public
  cantDeclineJobApplication jobApplicationCid candidate
  pure ()

-- hr manager `cant` decline a job application.
scenario14: Script ()
scenario14 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let summary = "CandidateCSV.pdf"
  jobApplicationCid <- canApplyToJobOffer jobOfferCid candidate summary public
  cantDeclineJobApplication jobApplicationCid hrManager
  pure ()

-- public `can` observe when new job applications are registered/rejected to the job offer public state.
scenario15: Script ()
scenario15 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let other = testParties.other
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let (summary, otherSummary) = ("CandidateCSV.pdf", "OtherCandidateCSV.pdf")
  canApplyToJobOffer jobOfferCid candidate summary public
  jobApplicationCid <- canApplyToJobOffer jobOfferCid other otherSummary public
  -- public observes both registrations
  nbrOfJobApplications1 <- queryNbrOfJobApplications public (hrManager, jobId)  
  assertMsg "wrong nbr of job applications" $ nbrOfJobApplications1 == Some 2
  -- public observers application rejected
  canRejectJobApplication jobApplicationCid hrManager
  nbrOfJobApplications2 <- queryNbrOfJobApplications public (hrManager, jobId)  
  assertMsg "wrong nbr of job applications" $ nbrOfJobApplications2 == Some 1

-- upon accepting a job application, the rest should be archived and the job offer should be terminated
-- alog with the public state.
scenario16: Script ()
scenario16 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let other = testParties.other
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let (summary, otherSummary) = ("CandidateCSV.pdf", "OtherCandidateCSV.pdf")
  canApplyToJobOffer jobOfferCid candidate summary public
  jobApplicationCid <- canApplyToJobOffer jobOfferCid other otherSummary public
  -- public observes both registrations
  nbrOfJobApplications1 <- queryNbrOfJobApplications public (hrManager, jobId)  
  assertMsg "wrong nbr of job applications" $ nbrOfJobApplications1 == Some 2
  -- public observers the rest of applications get rejected
  canAcceptJobApplication jobApplicationCid hrManager
  nbrOfJobApplications2 <- queryNbrOfJobApplications public (hrManager, jobId)  
  assertMsg "wrong nbr of job applications" $ nbrOfJobApplications2 == (None)
  pure ()

-- hr manager `cannot` terminate a job offer using a non existing job application cid.
scenario17: Script ()
scenario17 = script do
  testParties <- setupTestParties
  let hrManager = testParties.hrManager
  let public = testParties.public
  let candidate = testParties.candidate
  let other = testParties.other
  let jobId = 1
  canCreateJobOfferPublicState jobId hrManager public
  jobOfferCid <- canCreateJobOffer jobId hrManager public
  let (summary, otherSummary) = ("CandidateCSV.pdf", "OtherCandidateCSV.pdf")
  canApplyToJobOffer jobOfferCid candidate summary public
  jobApplicationCid <- canCreateJobApplication jobId other hrManager summary
  -- public observes only the registration done through job offer
  nbrOfJobApplications1 <- queryNbrOfJobApplications public (hrManager, jobId)  
  assertMsg "wrong nbr of job applications" $ nbrOfJobApplications1 == Some 1
  -- hr manager fails to terminate job offer using wrong job application cid.
  cantTerminateJobOffer jobOfferCid hrManager jobApplicationCid
  pure ()
