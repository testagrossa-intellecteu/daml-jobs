module Main where

import Model
import Daml.Script
import qualified DA.Set as Set

template HRManagerService 
  with 
    userAdmin: Party
    hrManager: Party
  where 
    signatory userAdmin 
    observer hrManager
    
    ensure userAdmin /= hrManager

    key (userAdmin, hrManager): (Party, Party)
    maintainer key._1

    nonconsuming choice CreateJobOffer: ContractId JobOffer
      with
        jobId: Int
        public: Party
      controller hrManager
      do
        let jobApplicationCids = Set.empty
        create $ JobOfferPublicState with jobId; hrManager; public; jobApplicationCids
        create $ JobOffer with jobId; hrManager; public

setup: Script ()
setup = script do
    -- Allocate parties
    public <- createParty "pub"
    let parties = ["hr", "usr", "other-usr", "admin"]
    [hrManager, candidate, otherCandidate, userAdmin] <- mapA (createPartyWithRights [CanReadAs public]) parties

    -- Create an hr manager account service
    hrServiceCid <- submit userAdmin $ createCmd HRManagerService with userAdmin; hrManager
    
    -- Create a job offer
    let jobId = 1
    jobOfferCid <- submit hrManager $ exerciseCmd hrServiceCid CreateJobOffer with jobId; public

    -- Create job applications for both candidates to above job offer
    let (summary, otherSummary) = ("CSV.pdf", "OtherCSV.pdf")
    submitMulti [candidate] [public] $ exerciseCmd jobOfferCid NewJobApplication with candidate; summary
    submitMulti [otherCandidate] [public] $ exerciseCmd jobOfferCid NewJobApplication with
      candidate=otherCandidate
      summary=otherSummary

    return ()


-- | Creates a user + party given a hint.
createParty: Text -> Script Party
createParty name = do
  createPartyWithRights [] name

-- | Creates a user + party given extra user rights and a hint.
createPartyWithRights: [UserRight] -> Text -> Script Party
createPartyWithRights rights name = do
  -- 1. Allocate party with the given display name
  party <- allocatePartyWithHint name $ PartyIdHint name
  -- 2. Construct user-id from text
  userId <- validateUserId name
  -- 3. Create users with the given rights
  createUser (User userId (Some party)) (CanActAs party :: rights)
  pure party

