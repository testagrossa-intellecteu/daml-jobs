module Main where

import Daml.Script

setup: Script ()
setup = script do
    -- 1. Allocate parties with the given display name
    hrManager <- allocatePartyWithHint "HRManager" (PartyIdHint"hr")
    candidate <- allocatePartyWithHint "Candidate" (PartyIdHint "usr")
    public <- allocatePartyWithHint "Public" (PartyIdHint "pub")

    -- 2. Construct user-ids from text
    hrManagerId <- validateUserId "Recruiter"
    candidateId <- validateUserId "Alice"

    -- 3. Create users with the given rights
    createUser (User hrManagerId (Some hrManager)) [CanActAs hrManager]
    createUser (User candidateId (Some candidate)) [CanActAs candidate]

    -- TODO: create service
    return ()

template JobOffer
  with
    hrManager: Party
    public: Party
  where
    signatory hrManager
    observer public

    ensure hrManager /= public

    nonconsuming choice NewJobApplication: ContractId JobApplication with
        candidate: Party
        summary: Text
      controller candidate
      do
        assertMsg "hr manager cannot apply to a job offer" (hrManager /= candidate)
        create $ JobApplication with candidate; hrManager; summary

template JobApplication
  with
    candidate: Party
    hrManager: Party
    summary: Text
  where
    signatory candidate, hrManager

    ensure candidate /= hrManager

    key (candidate, hrManager): (Party, Party)
    maintainer key._1

    nonconsuming choice Accept: (ContractId JobContract)
      controller hrManager
      do
        archive self
        create $ JobContract with employee=candidate; hrManager

template JobContract
  with
    hrManager: Party
    employee: Party
  where
    signatory hrManager, employee

    ensure hrManager /= employee

    key (hrManager, employee): (Party, Party)
    maintainer [key._1, key._2]
